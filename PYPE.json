{
  "ts_init": "2022-10-28T03:42:56.990459",
  "name": "_PYPE_START",
  "co_name": null,
  "suc": 1,
  "skipped": -1,
  "file": null,
  "lineno": null,
  "source": [],
  "last_run": {
    "ts_init": "2022-10-28T03:42:56.990476",
    "suc": -1,
    "dur_ms": -1,
    "stdout": [],
    "stderr": [],
    "endtime": "2022-10-28T03:42:56.990479"
  },
  "save_run": {
    "ts_init": "2022-10-28T03:42:56.990484",
    "suc": -1,
    "dur_ms": -1,
    "stdout": [],
    "stderr": [],
    "endtime": "2022-10-28T03:42:56.990487"
  }
}
{
  "ts_init": "2022-10-28T03:42:56.994480",
  "name": "lazy_wget/0",
  "co_name": "know_ngl",
  "suc": 1,
  "skipped": 1,
  "file": "/root/catsmile/pype/examples/depend_mol.py",
  "lineno": 151,
  "source": [
    "    ctl.lazy_pip_install('nglview'.split())"
  ],
  "last_run": {
    "ts_init": "2022-10-28T03:42:56.993056",
    "suc": 1,
    "dur_ms": 2,
    "stdout": [],
    "stderr": [
      "",
      "0it [00:00, ?it/s]",
      "[BULD](name='lazy_wget/0', code 'know_ngl', file='/root/catsmile/pype/examples/depend_mol.py', line 151)",
      "  File \"'/root/catsmile/pype/examples/depend_mol.py'\", line 151, in know_ngl)",
      "    ctl.lazy_pip_install('nglview'.split())",
      "[CHCK][SKIP]",
      "",
      "1it [00:00, 509.08it/s]"
    ],
    "endtime": "2022-10-28T03:42:56.993044"
  },
  "save_run": {
    "ts_init": "2022-10-28T03:41:56.535973",
    "suc": -1,
    "dur_ms": -1,
    "stdout": [],
    "stderr": [],
    "endtime": "2022-10-28T03:41:56.535978"
  }
}
{
  "ts_init": "2022-10-28T03:42:57.005966",
  "name": "git/ngl",
  "co_name": "know_ngl",
  "suc": 0,
  "skipped": 1,
  "file": "/root/catsmile/pype/examples/depend_mol.py",
  "lineno": 154,
  "source": [
    "    x = ctl.lazy_git_url_commit('https://github.com/nglviewer/ngl','ffa0bacf433114bd5debaf08e3fb0cd8850daa64',name='git/ngl')"
  ],
  "last_run": {
    "ts_init": "2022-10-28T03:42:57.004218",
    "suc": 0,
    "dur_ms": 9,
    "stdout": [
      "https://github.com/nglviewer/ngl",
      "fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.",
      "Use '--' to separate paths from revisions, like this:",
      "'git <command> [<revision>...] -- [<file>...]'",
      "HEAD"
    ],
    "stderr": [
      "",
      "0it [00:00, ?it/s]",
      "[BULD](name='git/ngl', code 'know_ngl', file='/root/catsmile/pype/examples/depend_mol.py', line 154)",
      "  File \"'/root/catsmile/pype/examples/depend_mol.py'\", line 154, in know_ngl)",
      "    x = ctl.lazy_git_url_commit('https://github.com/nglviewer/ngl','ffa0bacf433114bd5debaf08e3fb0cd8850daa64',name='git/ngl')",
      "[CHCK][cmd]set -e; git -C ngl config --get remote.origin.url",
      "[cmd]set -e; git -C ngl rev-parse HEAD",
      "------------------------------",
      "Evaltime traceback:",
      "/root/catsmile/pype/pype/controller.py:543: UserWarning: [print_tb_frames,StackSummary] is not safe after os.chdir. StackSummary only shows relative path",
      "  warnings.warn('[print_tb_frames,StackSummary] is not safe after os.chdir. StackSummary only shows relative path')",
      "  File \"/root/catsmile/pype/pype/controller.py\", line 1584, in check_git_url_commit",
      "    RO(None,sc(f'git -C {target_dir} rev-parse HEAD')).strip()",
      "  File \"/root/catsmile/pype/pype/controller.py\", line 371, in strip",
      "    def strip(self,): return RO(self, (lambda x:x.strip()))",
      "  File \"/root/catsmile/pype/pype/controller.py\", line 394, in __eq__",
      "    return RuntimeObject(self, caller)",
      "  File \"/root/catsmile/pype/pype/controller.py\", line 398, in <lambda>",
      "    caller = lambda x: x.__and__(RO(b)()) if x else False",
      "------------------------------",
      "------------------------------",
      "Evaltime traceback:",
      "  File \"/root/catsmile/pype/pype/controller.py\", line 400, in __and__",
      "    return RuntimeObject(self, caller)",
      "  File \"/root/catsmile/pype/pype/controller.py\", line 1078, in run_node_with_control",
      "    check = RuntimeObject(check).call()",
      "------------------------------",
      "",
      "0it [00:00, ?it/s]"
    ],
    "endtime": "2022-10-28T03:42:57.004189"
  },
  "save_run": {
    "ts_init": "2022-10-28T03:42:00.327923",
    "suc": -1,
    "dur_ms": -1,
    "stdout": [],
    "stderr": [],
    "endtime": "2022-10-28T03:42:00.327936"
  }
}
